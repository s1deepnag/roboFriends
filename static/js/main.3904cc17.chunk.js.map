{"version":3,"sources":["components/Scroll.js","components/Card.js","components/CardList.js","components/SearchBox.js","containers/App.js","index.js"],"names":["Scroll","props","style","overflowY","border","height","children","Card","className","alt","src","id","name","email","CardList","robots","map","user","i","SearchBox","searchField","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","length","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAUeA,EARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAO,SAApE,SACKJ,EAAMK,YCeJC,EAhBF,SAACN,GAKV,OACI,sBAAKO,UAAU,uDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BT,EAAMU,GAAhC,cACrB,gCACI,6BAAKV,EAAMW,OACX,4BAAIX,EAAMY,eCWXC,EAtBE,SAACb,GAEd,OACI,8BAEIA,EAAMc,OAAOC,KACT,SAACC,EAAKC,GAEF,OACI,cAAC,EAAD,CAEAP,GAAIV,EAAMc,OAAOG,GAAGP,GACpBC,KAAMX,EAAMc,OAAOG,GAAGN,KACtBC,MAAOZ,EAAMc,OAAOG,GAAGL,OAHlBK,SCEdC,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,qBAAKb,UAAU,MAAf,SACI,uBACAA,UAAU,mCACVc,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCsDPI,G,wDAtDX,aAAe,IAAD,8BACV,gBAQJC,eAAiB,SAACC,GACd,EAAKC,SAAU,CAACR,YAAaO,EAAME,OAAOC,SAR1C,EAAKC,MAAQ,CACThB,OAAQ,GACRK,YAAY,IAJN,E,qDAad,WAAqB,IAAD,OAChBY,MAAM,8CACLC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAG,GAAU,EAAKR,SAAS,CAACb,OAAQqB,S,oBAY5C,WACC,IAAD,OAIUC,EAAiBC,KAAKP,MAAMhB,OAAOwB,QAAO,SAAAC,GAC5C,OAAOA,EAAM5B,KAAK6B,cAAcC,SAAS,EAAKX,MAAMX,YAAYqB,kBAIpE,OAAIH,KAAKP,MAAMhB,OAAO4B,OAId,sBAAKnC,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,0BACA,cAAC,EAAD,CAAWa,aAAciB,KAAKZ,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,CAAUX,OAAQsB,SAPvB,+C,GAzCDO,cCClBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAE,EAAF,MAEFC,SAASC,eAAe,W","file":"static/js/main.3904cc17.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height:'700px'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","//import React, {Component} from \"react\";\nimport React from \"react\";\n\n\nconst Card = (props) => {\n    // destructuring..! can use the props directly now, if this is a function instead\n    // of a class, can do destructuring in fun parameter itself..\n    // Card({name, email, id}) {.....} like so. Code is Clean and looks COOOOLLL...!\n    //const {name, email, id} = this.props;\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 '>\n            <img alt='robots' src={`https://robohash.org/${props.id}?200*200`} />\n            <div>\n                <h2>{props.name}</h2>\n                <p>{props.email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = (props) => \n{\n    return(\n        <div>\n        {\n            props.robots.map(\n                (user,i) =>\n                {\n                    return ( \n                        <Card\n                        key={i}\n                        id={props.robots[i].id}\n                        name={props.robots[i].name}\n                        email={props.robots[i].email}\n                        />\n                    );\n                })\n        }\n        </div>\n    );\n}\n\nexport default CardList;","import React from \"react\";\n\nconst SearchBox = ({searchField, searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input \n            className='pa3 ba b--green bg-lightest-blue'\n            type='search' \n            placeholder='search robots'\n            onChange={searchChange} \n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React, {Component} from \"react\";\nimport Scroll from '../components/Scroll'\nimport CardList from '../components/CardList';\nimport SearchBox from \"../components/SearchBox\";\nimport './App.css'\n\n\nclass App extends Component \n{   \n    constructor() {\n        super();\n        this.state = {\n            robots: [],\n            searchField:''\n        }\n    }\n\n\n    onSearchChange = (event) => {\n        this.setState( {searchField: event.target.value });\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then( response => response.json())\n        .then( users => {this.setState({robots: users}) });\n\n        // /* longer version */\n        // fetch('https://jsonplaceholder.typicode.com/users').\n        // then( response => {\n        //     return response.json();\n        // }).\n        // then( users => {\n        //     this.setState({robots: users});\n        // })\n    }\n\n    render()\n    {\n        // destructuring to be done. \n        //const {robots, searchField} = this.state ;\n\n        const filteredRobots = this.state.robots.filter(robot => {\n            return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase()) ;\n        })\n        \n        // Should use ternany operater here to look Clean.!\n        if(!this.state.robots.length) {\n            return <h1> Loading </h1>\n        } else {\n            return (\n                <div className='tc'>\n                    <h1 className='f1'> RoboFriends</h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n                    <Scroll>\n                        <CardList robots={filteredRobots} />\n                    </Scroll>\n                </div>\n            );\n        }\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/App'\n//import reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    < App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}